// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: /Users/Ziad/Desktop/Test/Java--_RE.flex
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/** A small utility class. */
class Utility {

  private Utility() {}

  private static final List<String> ERROR_MESSAGES =
      Collections.unmodifiableList(
          Arrays.asList(
              "Error: Unmatched end-of-comment punctuation.",
              "Error: Unmatched start-of-comment punctuation.",
              "Error: Unclosed string.",
              "Error: Illegal character."));

  public static final int E_ENDCOMMENT = 0;
  public static final int E_STARTCOMMENT = 1;
  public static final int E_UNCLOSEDSTR = 2;
  public static final int E_UNMATCHED = 3;

  public static void error(int code) {
    System.err.println(ERROR_MESSAGES.get(code));
  }
}

/** The tokens returned by the scanner. */
class Yytoken {
  public int m_index;
  public String m_text;
  public int m_line;
  public long m_charBegin;
  public long m_charEnd;

  Yytoken(int index, String text, int line, long charBegin, long charEnd) {
    checkArgument("index", index >= 0);
    checkArgument("line", line >= 0);
    checkArgument("charBegin", charBegin >= 0);
    checkArgument("charEnd", charEnd > 0);
    m_index = index;
    m_text = text;
    m_line = line;
    m_charBegin = charBegin;
    m_charEnd = charEnd;
  }

  @Override
  public String toString() {
    return "Text   : "
        + m_text
        + "\nindex : "
        + m_index
        + "\nline  : "
        + m_line
        + "\ncBeg. : "
        + m_charBegin
        + "\ncEnd. : "
        + m_charEnd;
  }

  private static void checkArgument(String argName, boolean expectation) {
    if (!expectation) {
      throw new IllegalArgumentException(argName);
    }
  }
}

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class XmC {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\3\0\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\0\32\25\1\26\1\27\1\30\1\0"+
    "\1\31\1\0\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\25\1\43\1\44\1\25\1\45"+
    "\1\46\2\25\1\47\1\50\1\51\1\52\1\53\4\25"+
    "\1\54\1\55\1\56\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\12\23\1\26"+
    "\1\27\1\30\3\2\2\1\1\31\1\3\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\6\23\1\44\7\23\2\0\1\2\1\45\1\46\1\2"+
    "\1\3\1\0\1\31\6\23\1\47\10\23\1\50\3\23"+
    "\1\51\4\23\1\52\1\23\1\53\2\23\1\54\1\23"+
    "\1\55\4\23\1\56\1\57\1\60\1\23\1\61\2\23"+
    "\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\136\0\136"+
    "\0\136\0\u011a\0\u0149\0\136\0\u0178\0\136\0\u01a7\0\u01d6"+
    "\0\u0205\0\136\0\u0234\0\u0263\0\u0292\0\u02c1\0\136\0\136"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\136\0\136\0\136\0\u04c6\0\136\0\u04f5"+
    "\0\u0524\0\u0553\0\136\0\u0582\0\136\0\136\0\136\0\136"+
    "\0\136\0\136\0\136\0\136\0\136\0\136\0\u05b1\0\u05e0"+
    "\0\u060f\0\u063e\0\u066d\0\u069c\0\u02c1\0\u06cb\0\u06fa\0\u0729"+
    "\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\136"+
    "\0\136\0\u08a1\0\u08d0\0\u08ff\0\353\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u02c1\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u02c1\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u02c1\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u02c1\0\u0d09\0\u02c1"+
    "\0\u0d38\0\u0d67\0\u02c1\0\u0d96\0\u02c1\0\u0dc5\0\u0df4\0\u0e23"+
    "\0\u0e52\0\u02c1\0\u02c1\0\u02c1\0\u0e81\0\u02c1\0\u0eb0\0\u0edf"+
    "\0\u02c1\0\u02c1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\3\1\30"+
    "\1\3\1\26\1\31\1\32\1\33\1\26\1\34\2\26"+
    "\1\35\1\26\1\36\2\26\1\37\1\40\1\26\1\41"+
    "\1\42\1\43\1\44\1\45\2\46\1\47\1\46\1\50"+
    "\4\46\1\51\4\46\1\52\40\46\60\0\2\4\56\0"+
    "\1\47\54\0\2\6\1\0\1\6\1\0\1\53\21\6"+
    "\1\54\27\6\23\0\1\55\56\0\1\56\56\0\1\57"+
    "\44\0\1\60\11\0\1\61\52\0\1\20\62\0\1\62"+
    "\56\0\1\63\1\64\55\0\1\65\56\0\1\66\52\0"+
    "\1\26\5\0\1\26\3\0\23\26\22\0\1\26\5\0"+
    "\1\26\3\0\15\26\1\67\1\70\4\26\22\0\1\26"+
    "\5\0\1\26\3\0\10\26\1\71\4\26\1\72\5\26"+
    "\22\0\1\26\5\0\1\26\3\0\15\26\1\73\5\26"+
    "\22\0\1\26\5\0\1\26\3\0\13\26\1\74\7\26"+
    "\22\0\1\26\5\0\1\26\3\0\6\26\1\75\5\26"+
    "\1\76\6\26\22\0\1\26\5\0\1\26\3\0\15\26"+
    "\1\77\5\26\22\0\1\26\5\0\1\26\3\0\5\26"+
    "\1\100\15\26\22\0\1\26\5\0\1\26\3\0\10\26"+
    "\1\101\1\102\11\26\22\0\1\26\5\0\1\26\3\0"+
    "\14\26\1\103\6\26\22\0\1\26\5\0\1\26\3\0"+
    "\15\26\1\104\5\26\3\0\2\46\1\0\6\46\1\105"+
    "\4\46\1\106\42\46\1\47\6\46\1\105\4\46\1\106"+
    "\42\46\1\0\6\46\1\107\4\46\1\110\42\46\1\0"+
    "\6\46\1\111\4\46\1\112\40\46\1\6\1\113\1\114"+
    "\1\6\1\114\1\115\21\6\1\54\27\6\17\0\1\26"+
    "\5\0\1\26\3\0\15\26\1\116\5\26\22\0\1\26"+
    "\5\0\1\26\3\0\5\26\1\117\15\26\22\0\1\26"+
    "\5\0\1\26\3\0\1\26\1\120\21\26\22\0\1\26"+
    "\5\0\1\26\3\0\14\26\1\121\6\26\22\0\1\26"+
    "\5\0\1\26\3\0\21\26\1\122\1\26\22\0\1\26"+
    "\5\0\1\26\3\0\15\26\1\123\5\26\22\0\1\26"+
    "\5\0\1\26\3\0\20\26\1\124\2\26\22\0\1\26"+
    "\5\0\1\26\3\0\14\26\1\125\6\26\22\0\1\26"+
    "\5\0\1\26\3\0\20\26\1\126\2\26\22\0\1\26"+
    "\5\0\1\26\3\0\15\26\1\127\5\26\22\0\1\26"+
    "\5\0\1\26\3\0\7\26\1\130\13\26\22\0\1\26"+
    "\5\0\1\26\3\0\17\26\1\131\3\26\22\0\1\26"+
    "\5\0\1\26\3\0\11\26\1\132\11\26\3\0\2\46"+
    "\1\0\6\46\1\107\4\46\1\0\42\46\1\0\6\46"+
    "\1\0\4\46\1\112\42\46\1\0\6\46\1\107\4\46"+
    "\1\106\42\46\1\0\6\46\1\105\4\46\1\112\40\46"+
    "\1\6\1\113\1\114\1\6\1\114\1\53\21\6\1\54"+
    "\27\6\1\0\2\114\1\0\1\114\22\0\1\6\46\0"+
    "\1\26\5\0\1\26\3\0\13\26\1\133\7\26\22\0"+
    "\1\26\5\0\1\26\3\0\1\26\1\134\21\26\22\0"+
    "\1\26\5\0\1\26\3\0\16\26\1\135\4\26\22\0"+
    "\1\26\5\0\1\26\3\0\20\26\1\136\2\26\22\0"+
    "\1\26\5\0\1\26\3\0\2\26\1\137\20\26\22\0"+
    "\1\26\5\0\1\26\3\0\1\26\1\140\21\26\22\0"+
    "\1\26\5\0\1\26\3\0\7\26\1\141\13\26\22\0"+
    "\1\26\5\0\1\26\3\0\21\26\1\142\1\26\22\0"+
    "\1\26\5\0\1\26\3\0\16\26\1\143\4\26\22\0"+
    "\1\26\5\0\1\26\3\0\14\26\1\144\6\26\22\0"+
    "\1\26\5\0\1\26\3\0\11\26\1\145\11\26\22\0"+
    "\1\26\5\0\1\26\3\0\4\26\1\146\16\26\22\0"+
    "\1\26\5\0\1\26\3\0\5\26\1\147\15\26\22\0"+
    "\1\26\5\0\1\26\3\0\12\26\1\150\10\26\22\0"+
    "\1\26\5\0\1\26\3\0\11\26\1\151\11\26\22\0"+
    "\1\26\5\0\1\26\3\0\13\26\1\152\7\26\22\0"+
    "\1\26\5\0\1\26\3\0\20\26\1\153\2\26\22\0"+
    "\1\26\5\0\1\26\3\0\16\26\1\154\4\26\22\0"+
    "\1\26\5\0\1\26\3\0\20\26\1\155\2\26\22\0"+
    "\1\26\5\0\1\26\3\0\5\26\1\156\15\26\22\0"+
    "\1\26\5\0\1\26\3\0\7\26\1\157\13\26\22\0"+
    "\1\26\5\0\1\26\3\0\1\26\1\160\21\26\22\0"+
    "\1\26\5\0\1\26\3\0\14\26\1\161\6\26\22\0"+
    "\1\26\5\0\1\26\3\0\5\26\1\162\15\26\22\0"+
    "\1\26\5\0\1\26\3\0\14\26\1\163\6\26\22\0"+
    "\1\26\5\0\1\26\3\0\4\26\1\164\16\26\22\0"+
    "\1\26\5\0\1\26\3\0\14\26\1\165\6\26\22\0"+
    "\1\26\5\0\1\26\3\0\14\26\1\166\6\26\22\0"+
    "\1\26\5\0\1\26\3\0\21\26\1\167\1\26\22\0"+
    "\1\26\5\0\1\26\3\0\5\26\1\170\15\26\22\0"+
    "\1\26\5\0\1\26\3\0\5\26\1\171\15\26\22\0"+
    "\1\26\5\0\1\26\3\0\4\26\1\172\16\26\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3854];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\3\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\4\1\2\11\12\1\3\11\1\1\1\11"+
    "\3\1\1\11\1\1\12\11\16\1\2\0\1\1\2\11"+
    "\2\1\1\0\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public XmC(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { System.out.println(\"Illegal character: <\" + yytext() + \">\");"+ZZ_NL+"  Utility.error(Utility.E_UNMATCHED); }");
            { System.out.println("Illegal character: <" + yytext() + ">");
  Utility.error(Utility.E_UNMATCHED);
            }
            // fall through
          case 52: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] {  }");
            { 
            }
            // fall through
          case 53: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { String str =  yytext().substring(1,yytext().length());"+ZZ_NL+"    Utility.error(Utility.E_UNCLOSEDSTR);"+ZZ_NL+"    return (new Yytoken(41,str,yyline,yychar,yychar + str.length())); }");
            { String str =  yytext().substring(1,yytext().length());
    Utility.error(Utility.E_UNCLOSEDSTR);
    return (new Yytoken(41,str,yyline,yychar,yychar + str.length()));
            }
            // fall through
          case 54: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return (new Yytoken(20,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(20,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 55: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [42] { return (new Yytoken(3,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(3,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 56: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { return (new Yytoken(4,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(4,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 57: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return (new Yytoken(12,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(12,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 58: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { return (new Yytoken(10,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(10,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 59: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [39] { return (new Yytoken(0,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(0,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 60: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return (new Yytoken(11,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(11,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 61: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return (new Yytoken(9,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(9,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 62: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return (new Yytoken(13,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(13,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 63: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return (new Yytoken(42,yytext(),yyline,yychar,yychar+yylength())); }");
            { return (new Yytoken(42,yytext(),yyline,yychar,yychar+yylength()));
            }
            // fall through
          case 64: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [40] { return (new Yytoken(1,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(1,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 65: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [41] { return (new Yytoken(2,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(2,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 66: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return (new Yytoken(16,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(16,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 67: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { return (new Yytoken(14,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(14,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 68: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return (new Yytoken(18,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(18,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 69: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return (new Yytoken(43,yytext(),yyline,yychar,yychar+yylength())); }");
            { return (new Yytoken(43,yytext(),yyline,yychar,yychar+yylength()));
            }
            // fall through
          case 70: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { return (new Yytoken(5,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(5,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 71: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { return (new Yytoken(6,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(6,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 72: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [46] { return (new Yytoken(7,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(7,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 73: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [60] { return (new Yytoken(21,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(21,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 74: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { return (new Yytoken(8,yytext(),yyline,yychar,yychar+1)); }");
            { return (new Yytoken(8,yytext(),yyline,yychar,yychar+1));
            }
            // fall through
          case 75: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { String str =  yytext().substring(1,yylength()-1);"+ZZ_NL+"    return (new Yytoken(40,str,yyline,yychar,yychar+yylength())); }");
            { String str =  yytext().substring(1,yylength()-1);
    return (new Yytoken(40,str,yyline,yychar,yychar+yylength()));
            }
            // fall through
          case 76: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return (new Yytoken(26,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(26,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 77: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return (new Yytoken(23,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(23,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 78: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return (new Yytoken(24,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(24,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 79: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { yybegin(COMMENT); comment_count++; }");
            { yybegin(COMMENT); comment_count++;
            }
            // fall through
          case 80: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return (new Yytoken(25,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(25,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 81: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return (new Yytoken(22,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(22,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 82: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return (new Yytoken(17,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(17,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 83: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return (new Yytoken(15,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(15,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 84: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return (new Yytoken(50,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(50,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 85: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return (new Yytoken(19,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(19,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 86: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return (new Yytoken(39,yytext(),yyline,yychar,yychar+2)); }");
            { return (new Yytoken(39,yytext(),yyline,yychar,yychar+2));
            }
            // fall through
          case 87: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { if (--comment_count == 0) yybegin(YYINITIAL); }");
            { if (--comment_count == 0) yybegin(YYINITIAL);
            }
            // fall through
          case 88: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { comment_count++; }");
            { comment_count++;
            }
            // fall through
          case 89: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return (new Yytoken(30,yytext(),yyline,yychar,yychar+3)); }");
            { return (new Yytoken(30,yytext(),yyline,yychar,yychar+3));
            }
            // fall through
          case 90: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return (new Yytoken(28,yytext(),yyline,yychar,yychar+4)); }");
            { return (new Yytoken(28,yytext(),yyline,yychar,yychar+4));
            }
            // fall through
          case 91: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return (new Yytoken(31,yytext(),yyline,yychar,yychar+4)); }");
            { return (new Yytoken(31,yytext(),yyline,yychar,yychar+4));
            }
            // fall through
          case 92: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return (new Yytoken(27,yytext(),yyline,yychar,yychar+4)); }");
            { return (new Yytoken(27,yytext(),yyline,yychar,yychar+4));
            }
            // fall through
          case 93: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return (new Yytoken(38,yytext(),yyline,yychar,yychar+4)); }");
            { return (new Yytoken(38,yytext(),yyline,yychar,yychar+4));
            }
            // fall through
          case 94: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return (new Yytoken(34,yytext(),yyline,yychar,yychar+5)); }");
            { return (new Yytoken(34,yytext(),yyline,yychar,yychar+5));
            }
            // fall through
          case 95: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return (new Yytoken(29,yytext(),yyline,yychar,yychar+5)); }");
            { return (new Yytoken(29,yytext(),yyline,yychar,yychar+5));
            }
            // fall through
          case 96: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return (new Yytoken(35,yytext(),yyline,yychar,yychar+5)); }");
            { return (new Yytoken(35,yytext(),yyline,yychar,yychar+5));
            }
            // fall through
          case 97: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return (new Yytoken(37,yytext(),yyline,yychar,yychar+6)); }");
            { return (new Yytoken(37,yytext(),yyline,yychar,yychar+6));
            }
            // fall through
          case 98: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return (new Yytoken(32,yytext(),yyline,yychar,yychar+6)); }");
            { return (new Yytoken(32,yytext(),yyline,yychar,yychar+6));
            }
            // fall through
          case 99: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return (new Yytoken(51,yytext(),yyline,yychar,yychar+7)); }");
            { return (new Yytoken(51,yytext(),yyline,yychar,yychar+7));
            }
            // fall through
          case 100: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return (new Yytoken(36,yytext(),yyline,yychar,yychar+8)); }");
            { return (new Yytoken(36,yytext(),yyline,yychar,yychar+8));
            }
            // fall through
          case 101: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return (new Yytoken(33,yytext(),yyline,yychar,yychar+8)); }");
            { return (new Yytoken(33,yytext(),yyline,yychar,yychar+8));
            }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java XmC [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        XmC scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new XmC(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
